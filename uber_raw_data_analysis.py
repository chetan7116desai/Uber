# -*- coding: utf-8 -*-
"""uber raw data analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_4HHhkr0z9AT6buZuYDSyyTdBlxP4fGq

Read CSV file and
seaborn is used for plotting maps
"""

# Commented out IPython magic to ensure Python compatibility.
# %pylab inline
import pandas as pd
import seaborn as sb

from google.colab import files
uploaded = files.upload()

# Commented out IPython magic to ensure Python compatibility.
# %pylab inline
import pandas as pd
import seaborn as sb
import io


df = pd.read_csv(io.BytesIO(uploaded['uber-raw-data-apr14.csv']))

"""df is the data frame in which the csv content are flown"""

df.info()

"""head() provides the first five data elements and tail() provides the last five"""

df.head()

df.tail()

"""When a csv file is imported and a Data Frame is made, the Date time objects in the file are read as a string object rather a Date Time object and Hence itâ€™s very tough to perform operations like Time difference on a string rather a Date Time object. Pandas to_datetime() method helps to convert string Date time into Python Date time object."""

df['Date/Time'] = pd.to_datetime(df["Date/Time"])
df.info()

df.tail()

def get_dom(dt):
    return dt.day

df['dom'] = df['Date/Time'].map(get_dom)

df.tail()

def get_weekday(dt):
    return dt.weekday()

df['weekday'] = df['Date/Time'].map(get_weekday)

def get_hour(dt):
    return dt.hour

df['hour'] = df['Date/Time'].map(get_hour)

df.tail()

#df.insert(4, 'minutes', df['Date/Time'].map(get_hour) )

#df = df.drop('minutes', axis=1)

"""Analysing the Day of month"""

hist(df.dom, bins=30, rwidth=0.9, range=(0.5, 30.5))
xlabel('date of the month')
ylabel('frequency')
title('Frequency by DoM - uber - Apr 2014');

"""data record per day of the month"""

#for k, rows in data.groupby('dom'):
#    print((k, len(rows)))
 
def count_rows(rows):
    return len(rows)

by_date = df.groupby('dom').apply(count_rows)
by_date

bar(range(1, 31),by_date)

by_date_sorted = by_date.sort_values()
by_date_sorted

bar(range(1, 31), by_date_sorted)
xticks(range(1,31), by_date_sorted.index)
xlabel('date of the month')
ylabel('frequency')
title('Frequency by DoM - uber - Apr 2014')
;

"""Analyse hour"""

hist(df.hour, bins=24,rwidth=.8, range=(.5, 24))

"""Analyse week day"""

hist(df.weekday, bins=7, range =(-.5,6.5), rwidth=.5, color='#008000')
xticks(range(7), 'Mon Tue Wed Thu Fri Sat Sun'.split());

"""cross analysis"""

by_cross = df.groupby('weekday hour'.split()).apply(count_rows).unstack()

by_cross

sb.heatmap(by_cross)

"""By latitude and longitude"""

hist(df['Lat'], bins=100, range = (40.5, 41));

hist(df['Lon'], bins=100, range = (-74.1, -73.9));

hist(df['Lon'], bins=100, range = (-74.1, -73.9), color='g', alpha=.5, label = 'longitude')
grid()
legend(loc='upper left')
twiny()
hist(df['Lat'], bins=100, range = (40.5, 41), color='r', alpha=.5, label = 'latitude')
legend(loc='best')
;

figure(figsize=(20, 20))
plot(df['Lon'], df['Lat'], '.', ms=1, alpha=.5)
xlim(-74.2, -73.7)
ylim(40.7, 41)

